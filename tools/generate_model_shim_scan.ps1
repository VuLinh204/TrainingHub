# Usage: run this script on the server where TrainingHubServer lives
# Example: powershell -ExecutionPolicy Bypass -File .\generate_model_shim_scan.ps1

Param(
    [string]$ControllersDir = 'C:\xampp\htdocs\TrainingHubServer\controllers',
    [string]$ModelsDir = 'C:\xampp\htdocs\TrainingHubServer\models',
    [string]$OutFile = 'C:\xampp\htdocs\Training\tools\model_shim_report.txt'
)

function Find-ControllerMethodCalls {
    param([string]$dir)
    if (-not (Test-Path $dir)) { Write-Warning "Controllers dir not found: $dir"; return @() }
    $regex = '->get([A-Za-z0-9_]+)\s*\('
    $results = @()
    Get-ChildItem -Path $dir -Recurse -Filter '*.php' | ForEach-Object {
        $path = $_.FullName
        $content = Get-Content -Path $path -Raw -ErrorAction SilentlyContinue
        if ($null -eq $content) { return }
        [System.Text.RegularExpressions.Regex]::Matches($content, $regex) | ForEach-Object {
            $m = $_
            $method = 'get' + $m.Groups[1].Value
            $results += [PSCustomObject]@{File=$path; Method=$method}
        }
    }
    return $results | Sort-Object Method -Unique
}

function Find-ModelMethods {
    param([string]$dir)
    if (-not (Test-Path $dir)) { Write-Warning "Models dir not found: $dir"; return @() }
    $regex = 'public\s+function\s+([A-Za-z0-9_]+)\s*\('
    $results = @()
    Get-ChildItem -Path $dir -Recurse -Filter '*.php' | ForEach-Object {
        $path = $_.FullName
        $content = Get-Content -Path $path -Raw -ErrorAction SilentlyContinue
        if ($null -eq $content) { return }
        [System.Text.RegularExpressions.Regex]::Matches($content, $regex) | ForEach-Object {
            $m = $_
            $results += [PSCustomObject]@{File=$path; Function=$m.Groups[1].Value}
        }
    }
    return $results | Sort-Object Function -Unique
}

$controllerCalls = Find-ControllerMethodCalls -dir $ControllersDir
$modelFuncs = Find-ModelMethods -dir $ModelsDir

$modelNames = $modelFuncs | ForEach-Object { $_.Function }

$missing = @()
foreach ($call in $controllerCalls) {
    if (-not ($modelNames -contains $call.Method)) {
        $missing += $call
    }
}

# Build report
$sb = New-Object System.Text.StringBuilder
$sb.AppendLine("Model shim scan report") | Out-Null
$sb.AppendLine("Date: $(Get-Date -Format o)") | Out-Null
$sb.AppendLine("ControllersDir: $ControllersDir") | Out-Null
$sb.AppendLine("ModelsDir: $ModelsDir") | Out-Null
$sb.AppendLine("") | Out-Null
$sb.AppendLine("Found controller method calls:") | Out-Null
$controllerCalls | ForEach-Object { $sb.AppendLine("- $($_.Method) => $($_.File)") | Out-Null }
$sb.AppendLine("") | Out-Null
$sb.AppendLine("Found model public methods:") | Out-Null
$modelFuncs | ForEach-Object { $sb.AppendLine("- $($_.Function) => $($_.File)") | Out-Null }
$sb.AppendLine("") | Out-Null
$sb.AppendLine("Missing methods (called by controllers but not present in models):") | Out-Null
if ($missing.Count -eq 0) { $sb.AppendLine("- None detected") | Out-Null } else {
    foreach ($m in $missing) {
        $sb.AppendLine("- $($m.Method) => $($m.File)") | Out-Null
        # Suggest a shim: try to find a close model function by substring
        $name = $m.Method
        $candidates = $modelNames | Where-Object { $_ -like "*" + ($name -replace '^get','') + "*" }
        if ($candidates.Count -gt 0) {
            $sb.AppendLine("  Possible matches in models: " + ($candidates -join ', ')) | Out-Null
            $sb.AppendLine("  Suggested shim (map to first match):") | Out-Null
            $map = $candidates[0]
            $shim = @"
    /**
     * Compatibility shim generated by scan
     */
    public function $name(	`$arg0) {
        return `${this}->$map(`$arg0);
    }
"@
            $sb.AppendLine($shim) | Out-Null
        } else {
            $sb.AppendLine("  No close matches found. Suggested stub that throws a clear exception:") | Out-Null
            $stub = @"
    /**
     * Compatibility stub generated by scan
     */
    public function $name(	`$arg0) {
        throw new Exception('Missing model method $name - please implement or map to existing method.');
    }
"@
            $sb.AppendLine($stub) | Out-Null
        }
    }
}

# Save report
$sb.ToString() | Set-Content -Path $OutFile -Force -Encoding UTF8
Write-Host "Report written to $OutFile"
```}]}]}]}]}]}]}]